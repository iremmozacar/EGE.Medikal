// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using EgeApp.Frontend.Mvc.Data;

#nullable disable

namespace EgeApp.Frontend.Mvc.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240922211135_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "f8277277-393d-441f-a66f-b25ea2a453f6"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "f7510d57-b162-47fd-a5cb-4ca542ef72e9"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "49bb0905-f559-4d1f-b21d-6f36315a5def"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "49bb0905-f559-4d1f-b21d-6f36315a5def"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "49bb0905-f559-4d1f-b21d-6f36315a5def"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "49bb0905-f559-4d1f-b21d-6f36315a5def"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "f7510d57-b162-47fd-a5cb-4ca542ef72e9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EgeApp.Frontend.Mvc.Data.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f8277277-393d-441f-a66f-b25ea2a453f6",
                            Description = "Sistemdeki her türlü işi yapmaya yetkili rol",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = "f7510d57-b162-47fd-a5cb-4ca542ef72e9",
                            Description = "Sistemdeki yönetimsel işleri yapmaya yetkili rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "49bb0905-f559-4d1f-b21d-6f36315a5def",
                            Description = "Müşterilerin rolü",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("EgeApp.Frontend.Mvc.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5ad1842-eecb-493e-b281-d88881c07e81",
                            Email = "denizcoban@example.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            LastName = "Çoban",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZCOBAN@EXAMPLE.COM",
                            NormalizedUserName = "DENIZCOBAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEE9mU5DiPt4pQs+5CKCMI9yBd8yFekqFcBhQJbKHKxf2j4mlwFnS5SCqAvumV1poiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6359c04-e761-4280-add6-fe54f7fa2a2a",
                            TwoFactorEnabled = false,
                            UserName = "denizcoban"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b67a3056-deaf-48a9-9261-8480b49b1889",
                            Email = "sedenkaban@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seden",
                            LastName = "Kaban",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEDENKABAN@EXAMPLE.COM",
                            NormalizedUserName = "SEDENKABAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJdjToZT5tLnMroEsAkaLiYIpi7OJLt7rRTCRO1NtwXe3tZp+wqROFB7wb0DOpxwkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afccf848-8eab-4444-b935-f3e1b2278ece",
                            TwoFactorEnabled = false,
                            UserName = "sedenkaban"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c06429a7-61be-4217-a412-177c41b067c9",
                            Email = "kemalcandan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            LastName = "Candan",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMALCANDAN@EXAMPLE.COM",
                            NormalizedUserName = "KEMALCANDAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEARM2NLtCSj0kChA5C5VhDg6mov1gy24XpYiKfIQ8R8o9bSGJygxpHdyFQnggLW/Mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19e762f3-5104-4724-93ee-0323eca3a54a",
                            TwoFactorEnabled = false,
                            UserName = "kemalcandan"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6788ecc6-470b-4478-bf22-22e600656a11",
                            Email = "berfukeloglan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Berfu",
                            LastName = "Keloğlan",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERFUKELOGLAN@EXAMPLE.COM",
                            NormalizedUserName = "BERFUKELOGLAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJRK1I9E9Ma1wwkSm2AUxQ3QEnHRj3tGIjWuOeXYZeZ14KFdpq1/a5wesiSTzmJJ+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a357b183-54a1-4728-bebd-5b8420ad3355",
                            TwoFactorEnabled = false,
                            UserName = "berfukeloglan"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b867cee-de8e-4d49-898a-f3dd234e06cf",
                            Email = "cantan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "CANTAN@EXAMPLE.COM",
                            NormalizedUserName = "CANTAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBKil5mbClmL3m2dZXRkIIL5epeGzcHMhfycarj+SoMTe75CEMr1IaP8Ps9BiGd8Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54cfe6ab-1955-4743-b661-c9fa4e1f0873",
                            TwoFactorEnabled = false,
                            UserName = "cantan"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6046ba1-290f-4610-a1c3-597ec681fd3e",
                            Email = "mugepor@example.com",
                            EmailConfirmed = true,
                            FirstName = "Müge",
                            LastName = "Por",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUGEPOR@EXAMPLE.COM",
                            NormalizedUserName = "MUGEPOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEFkANnpIp2Yh1ZI9OEw3Bh4T+IfmGML4qQYzhYGKqlOi8PL7QUWLnzIr7UmHMTYUPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cecd73c-0168-49d5-9580-8c82acdfbdf2",
                            TwoFactorEnabled = false,
                            UserName = "mugepor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EgeApp.Frontend.Mvc.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EgeApp.Frontend.Mvc.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EgeApp.Frontend.Mvc.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EgeApp.Frontend.Mvc.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EgeApp.Frontend.Mvc.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EgeApp.Frontend.Mvc.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
